generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String  @unique
  image          String?
  hashedPassword String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  messages Message[]
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  messageIds String[]  @db.ObjectId
  messages   Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String[]     @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id               Int        @id @default(autoincrement())
//   name             String
//   email            String     @unique
//   password         String
//   sentMessages     Message[]  @relation("SentMessages")
//   receivedMessages Message[]  @relation("ReceivedMessages")
//   chats            UserChat[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Message {
//   id         Int    @id @default(autoincrement())
//   sender     User   @relation("SentMessages", fields: [senderId], references: [id])
//   receiver   User   @relation("ReceivedMessages", fields: [receiverId], references: [id])
//   chat       Chat   @relation("ChatMessages", fields: [chatId], references: [id])
//   content    String
//   senderId   Int
//   receiverId Int
//   chatId     Int

//   latestMessage Chat? @relation("LatestMessage")

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Chat {
//   id              Int        @id @default(autoincrement())
//   chatName        String
//   isGroupChat     Boolean
//   users           UserChat[]
//   messages        Message[]  @relation("ChatMessages")
//   latestMessageId Int?       @unique
//   latestMessage   Message?   @relation("LatestMessage", fields: [latestMessageId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model UserChat {
//   id        Int      @id @default(autoincrement())
//   userId    Int
//   chatId    Int
//   user      User     @relation(fields: [userId], references: [id])
//   chat      Chat     @relation(fields: [chatId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@unique([userId, chatId])
// }
